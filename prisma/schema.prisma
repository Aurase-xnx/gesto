// Prisma schema for the database
// Setting up the database schema for the application
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(CLIENT)
  employeeType  EmployeeType?
  accounts      Account[]
  sessions      Session[]
  Restaurant    Restaurant[]
  Bookings      Bookings[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enums for roles and employee types
enum Role {
  CLIENT
  OWNER
  EMPLOYEE
}

enum EmployeeType {
  WAITER
  BARMAN
  COOK
}

//Models for the restaurant

model Restaurant {
  id        Int        @id @default(autoincrement())
  name      String
  address   String
  phone     String
  owner     User       @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  bookings  Bookings[]

  InventoryItems InventoryItems[]
  MenuItems      MenuItems[]
  Category       Category[]
}

model Bookings {
  id           Int        @id @default(autoincrement())
  date         DateTime
  time         String
  partySize    Int
  request      String?
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

// Models for the restaurant menu and inventory

model MenuItems {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId   Int
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     Int
  categoryType   CategoryType @relation(fields: [categoryTypeId], references: [id])
  categoryTypeId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model InventoryItems {
  id             Int          @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId   Int
  category       Category     @relation(fields: [categoryId], references: [id])
  categoryId     Int
  categoryType   CategoryType @relation(fields: [categoryTypeId], references: [id])
  categoryTypeId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
}

model Category {
  id             Int              @id @default(autoincrement())
  name           String
  menuItems      MenuItems[]
  inventoryItems InventoryItems[]
  categoryTypes  CategoryType[]
  Restaurant     Restaurant?      @relation(fields: [restaurantId], references: [id])
  restaurantId   Int?
}

model CategoryType {
  id             Int              @id @default(autoincrement())
  name           String
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int
  menuItems      MenuItems[]
  inventoryItems InventoryItems[]
}
